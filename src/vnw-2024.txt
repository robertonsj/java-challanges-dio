Principais aspectos da herança:

Classe Base (Superclasse):

A classe que é estendida ou herdada é chamada de superclasse ou classe base. Ela fornece uma implementação geral e pode conter atributos e métodos comuns a diversas subclasses.
Classe Derivada (Subclasse):

A classe que herda da superclasse é chamada de subclasse ou classe derivada. Ela herda os atributos e métodos da superclasse e pode adicionar, modificar ou estender seu comportamento.
Extensão e Especialização:

A herança permite estender o comportamento de uma classe existente, adicionando novos recursos ou modificando comportamentos existentes. Isso promove a especialização, onde a subclasse é uma versão mais especializada da superclasse.
Reutilização de Código:

A herança facilita a reutilização de código, uma vez que as subclasses podem herdar e reutilizar a implementação da superclasse. Isso reduz a duplicação de código e simplifica a manutenção.
Polimorfismo:

A herança está frequentemente associada ao polimorfismo, onde objetos de subclasses podem ser tratados como objetos da superclasse. Isso permite a flexibilidade no design do sistema.
// Classe base (superclasse)
public class Animal {
    protected String nome;

    public Animal(String nome) {
        this.nome = nome;
    }

    public void emitirSom() {
        System.out.println("O animal emite um som.");
    }
}
// Classe derivada (subclasse)
public class Cachorro extends Animal {
    private String raca;

    public Cachorro(String nome, String raca) {
        super(nome);
        this.raca = raca;
    }
// Sobrescrita do método emitirSom na subclasse
    @Override
    public void emitirSom() {
        System.out.println("O cachorro late.");
    }

    public void abanarRabo() {
        System.out.println("O cachorro está abanando o rabo.");
    }
}


private static boolean tocando() {
	boolean atendeu = new Random().nextInt(3) == 1;
	System.out.println("Atendeu ?" + atendeu);
	//Negando o ato de continuar tocando
	return ! atendeu;
}

2 - Escreva uma classe para representar um Aluno. Adicione atributos relacionados às características de um Aluno, como nome,matricula, curso matriculado, nome de 3 disciplinas que está cursando e as notas dessas disciplinas. Desenvolva um método para verificar se o aluno está aprovado(nota maior ou igual a 7) em uma disciplina. Escreva um programa para testar essa classe, que pede as informações do aluno ao usuário e ao final informa o nome das disciplinas, as notas e se o aluno foi aprovado.

//Inserir disciplinas
Inicio
	Para i de 0 até qtdDisciplina passo 1 faca 
		Escreva("Insira a disciplina " + i)
		Leia(disciplina[i]);
	Finalpara
Fim



POO
As metodologias de programação mudaram drasticamente desde a invenção do computador, principalmente para acomodar a crescente complexidade dos programas.
1. Ativação das instruções binárias da máquina com o uso do painel frontal do computador, contanto que os programas tivesse algumas centenas de instruções;
2. Linguagem de montagem: programas maiores e cada vez mais complexos, usando representações simbólicas das intruções de máquina;
3. Linguagens de alto nível: programas continuam a crescer; dá ao programador ferramentas para lidar com a complexidade; FORTRAN.
4. Programação estruturada: década de 1960; linguagens C e Pascal; é possível criar mas facilmente programas de complexidade moderada; oferece suporte a sub-rotinas autônomas; variáveis locais e estruturas de controle sofisticadas e independentes de GOTO.
5. POO: os programas agora são organizados a partir dos seus dados, e não mais a partir do que está ocorrendo no seu código, ou seja, definem-se os dados, e partir disso, as rotinas e operações  que podem atuar sobre eles; antes da POO, muitos projetos estavam perto ou excedendo o ponto em que a abordagem estruturada não funcionava mais. 

ENCAPSULAMENTO
	Mecanismo que vincula o código e os dados que ele trata. O objeto dá suporte ao encapsulamento, ou seja, a classe é a unidade básica de encapsulamento.

POLIMORFISMO
	 É a qualidade que permite que uma interface acesse uma classe geral de ações. A ação específica é determinada pela natureza exata da situação.
	Geralmente, o conceito de polimorfismo é representado pela expressão “uma interface, vários métodos”. Ou seja, é possível projetar uma interface genérica para um grupo de atividades relacionadas. O polimorfismo ajuda a reduzir a complexida- de permitindo que a mesma interface seja usada para especificar uma classe geral de ação. 

HERANÇA
	É a qualidade que permite que um objeto adquira as propriedades de outro objeto. Dá suporte ao conceito de classificação hierárquica. 

